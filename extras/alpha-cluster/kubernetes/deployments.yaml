apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
    labels:
      app.kubernetes.io/name: astroshop-accountingservice
      app.kubernetes.io/version: 1.11.1
      dt.owner: dev-team-microservices
      opentelemetry.io/name: astroshop-accountingservice
    name: astroshop-accountingservice
    namespace: staging-astroshop
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: astroshop-accountingservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          dynatrace.com/inject: "true"
          metadata.dynatrace.com/process.technology: .NET
          oneagent.dynatrace.com/inject: "true"
        labels:
          app.kubernetes.io/component: accountingservice
          app.kubernetes.io/instance: astroshop
          app.kubernetes.io/name: astroshop-accountingservice
          dt.owner: dev-team-microservices
          opentelemetry.io/name: astroshop-accountingservice
      spec:
        containers:
        - env:
          - name: Logging__LogLevel__Default
            value: Debug
          - name: Logging__LogLevel__Microsoft
            value: Information
          - name: Logging__LogLevel__Microsoft.AspNetCore
            value: Information
          - name: Logging__LogLevel__Microsoft.AspNetCore.Mvc
            value: Warning
          - name: Logging__LogLevel__Microsoft.AspNetCore.Routing
            value: Warning
          - name: Logging__LogLevel__Microsoft.Hosting.Lifetime
            value: Warning
          - name: Logging__LogLevel__Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware
            value: Information
          - name: DT_LOGLEVELCON
            value: info
          - name: DT_LOGCON_PROC
            value: stdout
          - name: DT_LOGGING_DESTINATION
            value: stdout
          - name: DT_LOGGING_DOTNET_FLAGS
            value: Propagator=true
          - name: OTEL_DOTNET_AUTO_INSTRUMENTATION_ENABLED
            value: "false"
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: dynatrace-otel-gateway-collector
          - name: OTEL_TRACES_EXPORTER
            value: none
          - name: OTEL_LOGS_EXPORTER
            value: none
          - name: OTEL_METRICS_EXPORTER
            value: console,otlp
          - name: KAFKA_SERVICE_ADDR
            value: astroshop-kafka:9092
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          image: shinojosa/astroshop:1.11.1-accountingservice
          imagePullPolicy: Always
          name: accountingservice
          resources:
            limits:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 astroshop-kafka 9092; do echo waiting for kafka; sleep
            2; done;
          image: busybox:latest
          imagePullPolicy: Always
          name: wait-for-kafka
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: astroshop
        serviceAccountName: astroshop
        terminationGracePeriodSeconds: 30
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
    labels:
      app.kubernetes.io/name: astroshop-adservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.11.1
      dt.owner: dev-team-microservices
      opentelemetry.io/name: astroshop-adservice
    name: astroshop-adservice
    namespace: staging-astroshop
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: astroshop-adservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          metadata.dynatrace.com/process.technology: Java
          oneagent.dynatrace.com/inject: "true"
        labels:
          app.kubernetes.io/component: adservice
          app.kubernetes.io/instance: astroshop
          app.kubernetes.io/name: astroshop-adservice
          dt.owner: dev-team-microservices
          opentelemetry.io/name: astroshop-adservice
      spec:
        containers:
        - env:
          - name: DT_LIVEDEBUGGER_COMMIT
            value: main
          - name: DT_LIVEDEBUGGER_REMOTE_ORIGIN
            value: https://gitlab.ed7d1415-78a5-4aae-87cd-bc4b4370812a.dynatrace.training/Otel-App/adservice
          - name: DT_RELEASE_VERSION
            value: v1.0.0-0751903d
          - name: DT_RELEASE_BUILD_VERSION
            value: BUILDv1.0.0-0751903d
          - name: DT_RELEASE_PRODUCT
            value: astroshop-adservice
          - name: DT_RELEASE_STAGE
            value: prod
          - name: DT_LOGLEVELCON
          - name: DT_LOGCON_PROC
          - name: DT_LOGGING_DESTINATION
          - name: DT_LOGGING_JAVA_FLAGS
          - name: JAVA_TOOL_OPTIONS
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: dynatrace-otel-gateway-collector
          - name: OTEL_TRACES_EXPORTER
            value: none
          - name: AD_SERVICE_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: astroshop-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: OTEL_LOGS_EXPORTER
            value: none
          - name: OTEL_METRICS_EXPORTER
            value: console,otlp
          image: shinojosa/astroshop:1.11.1-adservice
          imagePullPolicy: Always
          name: adservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: astroshop
        serviceAccountName: astroshop
        terminationGracePeriodSeconds: 30

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      meta.helm.sh/release-name: astroshop
      meta.helm.sh/release-namespace: astroshop
    labels:
      app.kubernetes.io/component: cartservice
      app.kubernetes.io/instance: astroshop
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: astroshop-cartservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.11.1
      dt.owner: dev-team-microservices
      helm.sh/chart: opentelemetry-demo-0.32.8
      opentelemetry.io/name: astroshop-cartservice
    name: astroshop-cartservice
    namespace: staging-astroshop
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: astroshop-cartservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          metadata.dynatrace.com/process.technology: .NET
          oneagent.dynatrace.com/inject: "true"
        labels:
          app.kubernetes.io/component: cartservice
          app.kubernetes.io/instance: astroshop
          app.kubernetes.io/name: astroshop-cartservice
          dt.owner: dev-team-microservices
          opentelemetry.io/name: astroshop-cartservice
      spec:
        containers:
        - env:
          - name: Logging__LogLevel__Default
            value: Debug
          - name: Logging__LogLevel__Microsoft
            value: Information
          - name: Logging__LogLevel__Microsoft.AspNetCore
            value: Information
          - name: Logging__LogLevel__Microsoft.AspNetCore.Mvc
            value: Warning
          - name: Logging__LogLevel__Microsoft.AspNetCore.Routing
            value: Warning
          - name: Logging__LogLevel__Microsoft.Hosting.Lifetime
            value: Warning
          - name: Logging__LogLevel__Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware
            value: Information
          - name: DT_LOGLEVELCON
          - name: DT_LOGCON_PROC
          - name: DT_LOGGING_DESTINATION
          - name: DT_LOGGING_DOTNET_FLAGS
          - name: OTEL_DOTNET_AUTO_INSTRUMENTATION_ENABLED
            value: "false"
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: dynatrace-otel-gateway-collector
          - name: OTEL_TRACES_EXPORTER
            value: none
          - name: OTEL_LOGS_EXPORTER
            value: none
          - name: OTEL_METRICS_EXPORTER
            value: console,otlp
          - name: CART_SERVICE_PORT
            value: "8080"
          - name: ASPNETCORE_URLS
            value: http://*:$(CART_SERVICE_PORT)
          - name: VALKEY_ADDR
            value: astroshop-valkey:6379
          - name: FLAGD_HOST
            value: astroshop-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          image: shinojosa/astroshop:1.11.1-cartservice
          imagePullPolicy: Always
          name: cartservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 astroshop-valkey 6379; do echo waiting for valkey;
            sleep 2; done;
          image: busybox:latest
          imagePullPolicy: Always
          name: wait-for-valkey
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: astroshop
        serviceAccountName: astroshop
        terminationGracePeriodSeconds: 30
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: astroshop
      meta.helm.sh/release-namespace: astroshop
    labels:
      app.kubernetes.io/component: checkoutservice
      app.kubernetes.io/instance: astroshop
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: astroshop-checkoutservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.11.1
      helm.sh/chart: opentelemetry-demo-0.32.8
      opentelemetry.io/name: astroshop-checkoutservice
    name: astroshop-checkoutservice
    namespace: staging-astroshop
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: astroshop-checkoutservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          metadata.dynatrace.com/process.technology: go
          oneagent.dynatrace.com/inject: "false"
        labels:
          app.kubernetes.io/component: checkoutservice
          app.kubernetes.io/instance: astroshop
          app.kubernetes.io/name: astroshop-checkoutservice
          opentelemetry.io/name: astroshop-checkoutservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: dynatrace-otel-gateway-collector
          - name: CHECKOUT_SERVICE_PORT
            value: "8080"
          - name: CART_SERVICE_ADDR
            value: astroshop-cartservice:8080
          - name: CURRENCY_SERVICE_ADDR
            value: astroshop-currencyservice:8080
          - name: EMAIL_SERVICE_ADDR
            value: http://astroshop-emailservice:8080
          - name: PAYMENT_SERVICE_ADDR
            value: astroshop-paymentservice:8080
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: astroshop-productcatalogservice:8080
          - name: SHIPPING_SERVICE_ADDR
            value: astroshop-shippingservice:8080
          - name: KAFKA_SERVICE_ADDR
            value: astroshop-kafka:9092
          - name: FLAGD_HOST
            value: astroshop-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          image: shinojosa/astroshop:1.11.1-checkoutservice
          imagePullPolicy: Always
          name: checkoutservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 astroshop-kafka 9092; do echo waiting for kafka; sleep
            2; done;
          image: busybox:latest
          imagePullPolicy: Always
          name: wait-for-kafka
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: astroshop
        serviceAccountName: astroshop
        terminationGracePeriodSeconds: 30
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      meta.helm.sh/release-name: astroshop
      meta.helm.sh/release-namespace: astroshop
    labels:
      app.kubernetes.io/component: currencyservice
      app.kubernetes.io/instance: astroshop
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: astroshop-currencyservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.11.1
      helm.sh/chart: opentelemetry-demo-0.32.8
      opentelemetry.io/name: astroshop-currencyservice
    name: astroshop-currencyservice
    namespace: staging-astroshop
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: astroshop-currencyservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          metadata.dynatrace.com/process.technology: cpp
          oneagent.dynatrace.com/inject: "false"
        labels:
          app.kubernetes.io/component: currencyservice
          app.kubernetes.io/instance: astroshop
          app.kubernetes.io/name: astroshop-currencyservice
          opentelemetry.io/name: astroshop-currencyservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: dynatrace-otel-gateway-collector
          - name: CURRENCY_SERVICE_PORT
            value: "8080"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: VERSION
            value: 1.11.1
          image: ghcr.io/open-telemetry/demo:1.11.1-currencyservice
          imagePullPolicy: Always
          name: currencyservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: astroshop
        serviceAccountName: astroshop
        terminationGracePeriodSeconds: 30
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      meta.helm.sh/release-name: astroshop
      meta.helm.sh/release-namespace: astroshop
    labels:
      app.kubernetes.io/component: emailservice
      app.kubernetes.io/instance: astroshop
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: astroshop-emailservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.11.1
      helm.sh/chart: opentelemetry-demo-0.32.8
      opentelemetry.io/name: astroshop-emailservice
    name: astroshop-emailservice
    namespace: staging-astroshop
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: astroshop-emailservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          metadata.dynatrace.com/process.technology: ruby
          oneagent.dynatrace.com/inject: "false"
        labels:
          app.kubernetes.io/component: emailservice
          app.kubernetes.io/instance: astroshop
          app.kubernetes.io/name: astroshop-emailservice
          opentelemetry.io/name: astroshop-emailservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: dynatrace-otel-gateway-collector
          - name: EMAIL_SERVICE_PORT
            value: "8080"
          - name: APP_ENV
            value: production
          - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318/v1/traces
          image: ghcr.io/open-telemetry/demo:1.11.1-emailservice
          imagePullPolicy: Always
          name: emailservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: astroshop
        serviceAccountName: astroshop
        terminationGracePeriodSeconds: 30
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      meta.helm.sh/release-name: astroshop
      meta.helm.sh/release-namespace: astroshop
    labels:
      app.kubernetes.io/component: flagd
      app.kubernetes.io/instance: astroshop
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: astroshop-flagd
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.11.1
      helm.sh/chart: opentelemetry-demo-0.32.8
      opentelemetry.io/name: astroshop-flagd
    name: astroshop-flagd
    namespace: staging-astroshop
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: astroshop-flagd
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          metadata.dynatrace.com/process.technology: flagd
          oneagent.dynatrace.com/inject: "false"
        labels:
          app.kubernetes.io/component: flagd
          app.kubernetes.io/instance: astroshop
          app.kubernetes.io/name: astroshop-flagd
          opentelemetry.io/name: astroshop-flagd
      spec:
        containers:
        - command:
          - /flagd-build
          - start
          - --uri
          - file:./etc/flagd/demo.flagd.json
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: dynatrace-otel-gateway-collector
          - name: FLAGD_METRICS_EXPORTER
            value: otel
          - name: FLAGD_OTEL_COLLECTOR_URI
            value: $(OTEL_COLLECTOR_NAME):4317
          image: ghcr.io/open-feature/flagd:v0.11.1
          imagePullPolicy: Always
          name: flagd
          ports:
          - containerPort: 8013
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 300Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/flagd
            name: config
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: astroshop
        serviceAccountName: astroshop
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: astroshop-flagd-config
          name: config
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: astroshop
      meta.helm.sh/release-namespace: astroshop
    labels:
      app.kubernetes.io/component: frauddetectionservice
      app.kubernetes.io/instance: astroshop
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: astroshop-frauddetectionservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.11.1
      helm.sh/chart: opentelemetry-demo-0.32.8
      opentelemetry.io/name: astroshop-frauddetectionservice
    name: astroshop-frauddetectionservice
    namespace: staging-astroshop
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: astroshop-frauddetectionservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          metadata.dynatrace.com/process.technology: Java
          oneagent.dynatrace.com/inject: "false"
        labels:
          app.kubernetes.io/component: frauddetectionservice
          app.kubernetes.io/instance: astroshop
          app.kubernetes.io/name: astroshop-frauddetectionservice
          opentelemetry.io/name: astroshop-frauddetectionservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: dynatrace-otel-gateway-collector
          - name: JAVA_TOOL_OPTIONS
            value: -javaagent:/app/opentelemetry-javaagent.jar
          - name: KAFKA_SERVICE_ADDR
            value: astroshop-kafka:9092
          - name: FLAGD_HOST
            value: astroshop-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          image: shinojosa/astroshop:1.11.1-frauddetectionservice
          imagePullPolicy: Always
          name: frauddetectionservice
          resources:
            limits:
              memory: 300Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 astroshop-kafka 9092; do echo waiting for kafka; sleep
            2; done;
          image: busybox:latest
          imagePullPolicy: Always
          name: wait-for-kafka
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: astroshop
        serviceAccountName: astroshop
        terminationGracePeriodSeconds: 30
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      meta.helm.sh/release-name: astroshop
      meta.helm.sh/release-namespace: astroshop
    labels:
      app.kubernetes.io/component: frontend
      app.kubernetes.io/instance: astroshop
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: astroshop-frontend
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.11.1
      dt.owner: dev-team-ux
      helm.sh/chart: opentelemetry-demo-0.32.8
      opentelemetry.io/name: astroshop-frontend
    name: astroshop-frontend
    namespace: staging-astroshop
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: astroshop-frontend
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          dt.owner: dev-team-ux
          metadata.dynatrace.com/process.technology: nodejs
          oneagent.dynatrace.com/inject: "true"
        labels:
          app.kubernetes.io/component: frontend
          app.kubernetes.io/instance: astroshop
          app.kubernetes.io/name: astroshop-frontend
          dt.owner: dev-team-ux
          opentelemetry.io/name: astroshop-frontend
      spec:
        containers:
        - env:
          - name: DT_LOGLEVELCON
            value: info
          - name: DT_LOGCON_PROC
            value: stdout
          - name: DT_LOGGING_DESTINATION
            value: stdout
          - name: DT_LOGGING_NODEJS_FLAGS
            value: Propagator=true
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: localhost
          - name: OTEL_TRACES_EXPORTER
            value: none
          - name: OTEL_LOGS_EXPORTER
            value: none
          - name: OTEL_METRICS_EXPORTER
            value: console,otlp
          - name: OTEL_NODE_DISABLED_INSTRUMENTATIONS
          - name: NODE_OPTIONS
          - name: FRONTEND_PORT
            value: "8080"
          - name: FRONTEND_ADDR
            value: :8080
          - name: AD_SERVICE_ADDR
            value: astroshop-adservice:8080
          - name: CART_SERVICE_ADDR
            value: astroshop-cartservice:8080
          - name: CHECKOUT_SERVICE_ADDR
            value: astroshop-checkoutservice:8080
          - name: CURRENCY_SERVICE_ADDR
            value: astroshop-currencyservice:8080
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: astroshop-productcatalogservice:8080
          - name: RECOMMENDATION_SERVICE_ADDR
            value: astroshop-recommendationservice:8080
          - name: SHIPPING_SERVICE_ADDR
            value: astroshop-shippingservice:8080
          - name: FLAGD_HOST
            value: astroshop-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_COLLECTOR_HOST
            value: $(OTEL_COLLECTOR_NAME)
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: WEB_OTEL_SERVICE_NAME
            value: frontend-web
          - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
          - name: NEXT_OTEL_VERBOSE
            value: "0"
          image: shinojosa/astroshop:1.11.1-frontend
          imagePullPolicy: Always
          name: frontend
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 512Mi
          securityContext:
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: astroshop
        serviceAccountName: astroshop
        terminationGracePeriodSeconds: 30
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: astroshop
      meta.helm.sh/release-namespace: astroshop
    generation: 1
    labels:
      app.kubernetes.io/component: frontendproxy
      app.kubernetes.io/instance: astroshop
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: astroshop-frontendproxy
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.11.1
      helm.sh/chart: opentelemetry-demo-0.32.8
      opentelemetry.io/name: astroshop-frontendproxy
    name: astroshop-frontendproxy
    namespace: staging-astroshop
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: astroshop-frontendproxy
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          dt.owner: dev-team-ux
        labels:
          app.kubernetes.io/component: frontendproxy
          app.kubernetes.io/instance: astroshop
          app.kubernetes.io/name: astroshop-frontendproxy
          opentelemetry.io/name: astroshop-frontendproxy
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: dynatrace-otel-gateway-collector
          - name: ENVOY_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: astroshop-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: FRONTEND_HOST
            value: astroshop-frontend
          - name: FRONTEND_PORT
            value: "8080"
          - name: GRAFANA_SERVICE_HOST
            value: astroshop-grafana
          - name: GRAFANA_SERVICE_PORT
            value: "80"
          - name: IMAGE_PROVIDER_HOST
            value: astroshop-imageprovider
          - name: IMAGE_PROVIDER_PORT
            value: "8081"
          - name: JAEGER_SERVICE_HOST
            value: astroshop-jaeger-query
          - name: JAEGER_SERVICE_PORT
            value: "16686"
          - name: LOCUST_WEB_HOST
            value: astroshop-loadgenerator
          - name: LOCUST_WEB_PORT
            value: "8089"
          - name: OTEL_COLLECTOR_HOST
            value: $(OTEL_COLLECTOR_NAME)
          - name: OTEL_COLLECTOR_PORT_GRPC
            value: "4317"
          - name: OTEL_COLLECTOR_PORT_HTTP
            value: "4318"
          image: ghcr.io/open-telemetry/demo:1.11.1-frontendproxy
          imagePullPolicy: IfNotPresent
          name: frontendproxy
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 50Mi
          securityContext:
            runAsGroup: 101
            runAsNonRoot: true
            runAsUser: 101
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: astroshop
        serviceAccountName: astroshop
        terminationGracePeriodSeconds: 30
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      meta.helm.sh/release-name: astroshop
      meta.helm.sh/release-namespace: astroshop
    labels:
      app.kubernetes.io/component: imageprovider
      app.kubernetes.io/instance: astroshop
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: astroshop-imageprovider
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.11.1
      helm.sh/chart: opentelemetry-demo-0.32.8
      opentelemetry.io/name: astroshop-imageprovider
    name: astroshop-imageprovider
    namespace: staging-astroshop
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: astroshop-imageprovider
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          metadata.dynatrace.com/process.technology: nginx
          metrics.dynatrace.com/port: "9113"
          metrics.dynatrace.com/scrape: "true"
          oneagent.dynatrace.com/inject: "false"
        labels:
          app.kubernetes.io/component: imageprovider
          app.kubernetes.io/instance: astroshop
          app.kubernetes.io/name: astroshop-imageprovider
          opentelemetry.io/name: astroshop-imageprovider
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: dynatrace-otel-gateway-collector
          - name: IMAGE_PROVIDER_PORT
            value: "8081"
          - name: OTEL_COLLECTOR_PORT_GRPC
            value: "4317"
          - name: OTEL_COLLECTOR_HOST
            value: $(OTEL_COLLECTOR_NAME)
          image: shinojosa/astroshop:1.11.1-imageprovider
          imagePullPolicy: Always
          name: imageprovider
          ports:
          - containerPort: 8081
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 150Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - args:
          - --nginx.scrape-uri=http://localhost:8081/status
          image: nginx/nginx-prometheus-exporter:1.3.0
          imagePullPolicy: IfNotPresent
          name: ngtinx-exporter
          ports:
          - containerPort: 9113
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: astroshop
        serviceAccountName: astroshop
        terminationGracePeriodSeconds: 30
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      meta.helm.sh/release-name: astroshop
      meta.helm.sh/release-namespace: astroshop
    labels:
      app.kubernetes.io/component: kafka
      app.kubernetes.io/instance: astroshop
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: astroshop-kafka
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.11.1
      helm.sh/chart: opentelemetry-demo-0.32.8
      opentelemetry.io/name: astroshop-kafka
    name: astroshop-kafka
    namespace: staging-astroshop
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: astroshop-kafka
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          metadata.dynatrace.com/process.technology: kafka
          oneagent.dynatrace.com/inject: "true"
        labels:
          app.kubernetes.io/component: kafka
          app.kubernetes.io/instance: astroshop
          app.kubernetes.io/name: astroshop-kafka
          opentelemetry.io/name: astroshop-kafka
      spec:
        containers:
        - env:
          - name: KAFKA_OPTS
            value: -Dotel.jmx.target.system=kafka-broker
          - name: DT_LOGLEVELCON
          - name: DT_LOGCON_PROC
          - name: DT_LOGGING_DESTINATION
          - name: DT_LOGGING_JAVA_FLAGS
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: dynatrace-otel-gateway-collector
          - name: KAFKA_ADVERTISED_LISTENERS
            value: PLAINTEXT://astroshop-kafka:9092
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: KAFKA_HEAP_OPTS
            value: -Xmx400M -Xms400M
          image: ghcr.io/open-telemetry/demo:1.11.1-kafka
          imagePullPolicy: Always
          name: kafka
          ports:
          - containerPort: 9092
            name: plaintext
            protocol: TCP
          - containerPort: 9093
            name: controller
            protocol: TCP
          resources:
            limits:
              memory: 600Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: astroshop
        serviceAccountName: astroshop
        terminationGracePeriodSeconds: 30
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: astroshop
      meta.helm.sh/release-namespace: astroshop
    labels:
      app.kubernetes.io/component: loadgenerator
      app.kubernetes.io/instance: astroshop
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: astroshop-loadgenerator
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.11.1
      helm.sh/chart: opentelemetry-demo-0.32.8
      opentelemetry.io/name: astroshop-loadgenerator
    name: astroshop-loadgenerator
    namespace: staging-astroshop
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: astroshop-loadgenerator
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        labels:
          app.kubernetes.io/component: loadgenerator
          app.kubernetes.io/instance: astroshop
          app.kubernetes.io/name: astroshop-loadgenerator
          opentelemetry.io/name: astroshop-loadgenerator
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: dynatrace-otel-gateway-collector
          - name: LOCUST_WEB_PORT
            value: "8089"
          - name: LOCUST_USERS
            value: "10"
          - name: LOCUST_SPAWN_RATE
            value: "1"
          - name: LOCUST_HOST
            value: http://astroshop-frontendproxy:8080
          - name: LOCUST_HEADLESS
            value: "false"
          - name: LOCUST_AUTOSTART
            value: "true"
          - name: LOCUST_BROWSER_TRAFFIC_ENABLED
            value: "true"
          - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
            value: python
          - name: FLAGD_HOST
            value: astroshop-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          image: ghcr.io/open-telemetry/demo:1.11.1-loadgenerator
          imagePullPolicy: IfNotPresent
          name: loadgenerator
          ports:
          - containerPort: 8089
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 1Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: astroshop
        serviceAccountName: astroshop
        terminationGracePeriodSeconds: 30
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      meta.helm.sh/release-name: astroshop
      meta.helm.sh/release-namespace: astroshop
    labels:
      app.kubernetes.io/component: paymentservice
      app.kubernetes.io/instance: astroshop
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: astroshop-paymentservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.11.1
      helm.sh/chart: opentelemetry-demo-0.32.8
      opentelemetry.io/name: astroshop-paymentservice
    name: astroshop-paymentservice
    namespace: staging-astroshop
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: astroshop-paymentservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          metadata.dynatrace.com/process.technology: nodejs
          oneagent.dynatrace.com/inject: "true"
        labels:
          app.kubernetes.io/component: paymentservice
          app.kubernetes.io/instance: astroshop
          app.kubernetes.io/name: astroshop-paymentservice
          opentelemetry.io/name: astroshop-paymentservice
      spec:
        containers:
        - env:
          - name: DT_LIVEDEBUGGER_COMMIT
            value: main
          - name: DT_LIVEDEBUGGER_REMOTE_ORIGIN
            value: https://gitlab.ed7d1415-78a5-4aae-87cd-bc4b4370812a.dynatrace.training/Otel-App/paymentservice
          - name: DT_RELEASE_VERSION
            value: v1.0.0-03d9ccca
          - name: DT_RELEASE_BUILD_VERSION
            value: BUILDv1.0.0-03d9ccca
          - name: DT_RELEASE_PRODUCT
            value: astroshop-paymentservice
          - name: DT_RELEASE_STAGE
            value: prod
          - name: DT_LOGLEVELCON
          - name: DT_LOGCON_PROC
          - name: DT_LOGGING_DESTINATION
          - name: DT_LOGGING_NODEJS_FLAGS
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: dynatrace-otel-gateway-collector
          - name: OTEL_TRACES_EXPORTER
            value: none
          - name: OTEL_LOGS_EXPORTER
            value: none
          - name: OTEL_METRICS_EXPORTER
            value: console,otlp
          - name: OTEL_NODE_DISABLED_INSTRUMENTATIONS
          - name: NODE_OPTIONS
          - name: PAYMENT_SERVICE_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: astroshop-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          image: shinojosa/astroshop:1.11.1-paymentservice
          imagePullPolicy: Always
          name: paymentservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 512Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: astroshop
        serviceAccountName: astroshop
        terminationGracePeriodSeconds: 30
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      meta.helm.sh/release-name: astroshop
      meta.helm.sh/release-namespace: astroshop
    labels:
      app.kubernetes.io/component: productcatalogservice
      app.kubernetes.io/instance: astroshop
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: astroshop-productcatalogservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.11.1
      helm.sh/chart: opentelemetry-demo-0.32.8
      opentelemetry.io/name: astroshop-productcatalogservice
    name: astroshop-productcatalogservice
    namespace: staging-astroshop
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: astroshop-productcatalogservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          metadata.dynatrace.com/process.technology: go
          oneagent.dynatrace.com/inject: "false"
        labels:
          app.kubernetes.io/component: productcatalogservice
          app.kubernetes.io/instance: astroshop
          app.kubernetes.io/name: astroshop-productcatalogservice
          opentelemetry.io/name: astroshop-productcatalogservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: dynatrace-otel-gateway-collector
          - name: OTEL_GO_AUTO_INSTRUMENTATION_ENABLED
            value: "false"
          - name: PRODUCT_CATALOG_SERVICE_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: astroshop-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          image: shinojosa/astroshop:1.11.1-productcatalogservice
          imagePullPolicy: Always
          name: productcatalogservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 150Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/src/app/products/
            name: volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: astroshop
        serviceAccountName: astroshop
        terminationGracePeriodSeconds: 30
        volumes:
        - name: volume
          persistentVolumeClaim:
            claimName: product-catalog-storage
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: astroshop
      meta.helm.sh/release-namespace: astroshop
    labels:
      app.kubernetes.io/component: quoteservice
      app.kubernetes.io/instance: astroshop
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: astroshop-quoteservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.11.1
      helm.sh/chart: opentelemetry-demo-0.32.8
      opentelemetry.io/name: astroshop-quoteservice
    name: astroshop-quoteservice
    namespace: staging-astroshop
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: astroshop-quoteservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          metadata.dynatrace.com/process.technology: PHP
          oneagent.dynatrace.com/inject: "false"
        labels:
          app.kubernetes.io/component: quoteservice
          app.kubernetes.io/instance: astroshop
          app.kubernetes.io/name: astroshop-quoteservice
          opentelemetry.io/name: astroshop-quoteservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: dynatrace-otel-gateway-collector
          - name: QUOTE_SERVICE_PORT
            value: "8080"
          - name: OTEL_PHP_AUTOLOAD_ENABLED
            value: "true"
          - name: OTEL_PHP_DISABLED_INSTRUMENTATIONS
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          image: shinojosa/astroshop:1.11.1-quoteservice
          imagePullPolicy: Always
          name: quoteservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 40Mi
          securityContext:
            runAsGroup: 33
            runAsNonRoot: true
            runAsUser: 33
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: astroshop
        serviceAccountName: astroshop
        terminationGracePeriodSeconds: 30
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      meta.helm.sh/release-name: astroshop
      meta.helm.sh/release-namespace: astroshop
    labels:
      app.kubernetes.io/component: recommendationservice
      app.kubernetes.io/instance: astroshop
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: astroshop-recommendationservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.11.1
      helm.sh/chart: opentelemetry-demo-0.32.8
      opentelemetry.io/name: astroshop-recommendationservice
    name: astroshop-recommendationservice
    namespace: staging-astroshop
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: astroshop-recommendationservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          metadata.dynatrace.com/process.technology: python
          oneagent.dynatrace.com/inject: "false"
        labels:
          app.kubernetes.io/component: recommendationservice
          app.kubernetes.io/instance: astroshop
          app.kubernetes.io/name: astroshop-recommendationservice
          opentelemetry.io/name: astroshop-recommendationservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: dynatrace-otel-gateway-collector
          - name: RECOMMENDATION_SERVICE_PORT
            value: "8080"
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: astroshop-productcatalogservice:8080
          - name: OTEL_PYTHON_LOG_CORRELATION
            value: "true"
          - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
            value: python
          - name: FLAGD_HOST
            value: astroshop-flagd
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          image: ghcr.io/open-telemetry/demo:1.11.1-recommendationservice
          imagePullPolicy: Always
          name: recommendationservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 500Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: astroshop
        serviceAccountName: astroshop
        terminationGracePeriodSeconds: 30
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      meta.helm.sh/release-name: astroshop
      meta.helm.sh/release-namespace: astroshop
    labels:
      app.kubernetes.io/component: shippingservice
      app.kubernetes.io/instance: astroshop
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: astroshop-shippingservice
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.11.1
      helm.sh/chart: opentelemetry-demo-0.32.8
      opentelemetry.io/name: astroshop-shippingservice
    name: astroshop-shippingservice
    namespace: staging-astroshop
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: astroshop-shippingservice
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          metadata.dynatrace.com/process.technology: rust
          oneagent.dynatrace.com/inject: "false"
        labels:
          app.kubernetes.io/component: shippingservice
          app.kubernetes.io/instance: astroshop
          app.kubernetes.io/name: astroshop-shippingservice
          opentelemetry.io/name: astroshop-shippingservice
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: dynatrace-otel-gateway-collector
          - name: SHIPPING_SERVICE_PORT
            value: "8080"
          - name: QUOTE_SERVICE_ADDR
            value: http://astroshop-quoteservice:8080
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          image: ghcr.io/open-telemetry/demo:1.11.1-shippingservice
          imagePullPolicy: Always
          name: shippingservice
          ports:
          - containerPort: 8080
            name: service
            protocol: TCP
          resources:
            limits:
              memory: 20Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: astroshop
        serviceAccountName: astroshop
        terminationGracePeriodSeconds: 30
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      meta.helm.sh/release-name: astroshop
      meta.helm.sh/release-namespace: astroshop
    labels:
      app.kubernetes.io/component: valkey
      app.kubernetes.io/instance: astroshop
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: astroshop-valkey
      app.kubernetes.io/part-of: opentelemetry-demo
      app.kubernetes.io/version: 1.11.1
      helm.sh/chart: opentelemetry-demo-0.32.8
      opentelemetry.io/name: astroshop-valkey
    name: astroshop-valkey
    namespace: staging-astroshop
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        opentelemetry.io/name: astroshop-valkey
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        labels:
          app.kubernetes.io/component: valkey
          app.kubernetes.io/instance: astroshop
          app.kubernetes.io/name: astroshop-valkey
          opentelemetry.io/name: astroshop-valkey
      spec:
        containers:
        - env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: dynatrace-otel-gateway-collector
          image: valkey/valkey:7.2-alpine
          imagePullPolicy: IfNotPresent
          name: valkey
          ports:
          - containerPort: 6379
            name: valkey
            protocol: TCP
          resources:
            limits:
              memory: 20Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 999
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: astroshop
        serviceAccountName: astroshop
        terminationGracePeriodSeconds: 30
kind: List
metadata:
  resourceVersion: ""
